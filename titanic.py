# -*- coding: utf-8 -*-
"""TITANIC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xI4TlsTGpQYsuSq9mByZojuNjuBF_SC8
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = sns.load_dataset('titanic')

df.head()

df.tail()

df.sample(5)

df.shape

df.columns

df.dtypes

df.isnull()

df.isnull().any()

df.isnull().sum()

df.info()

df.duplicated()

df.duplicated().sum()

df.describe()

df.describe(include="category")

df.describe(include="all")

# checking the distribution of 'age'
plt.figure(figsize=(10,5))
sns.histplot(df['age'])
plt.show()



# checking the distribution of 'age'
plt.figure(figsize=(10,5))
sns.histplot(df['age'], bins=8)
plt.show()

df.hist(layout=(1,6), figsize=(18,3))
plt.show()

sns.boxplot(data=df, y='age')
plt.show()



plt.figure(figsize=(10,7))
sns.boxplot(data=df, y='age', x='pclass', hue='survived')
plt.show()

sns.scatterplot(x=df['age'], y=df['fare'])

plt.show()

sns.scatterplot(data=df, x='age', y='fare', hue='sex')
plt.show()

x=list(np.arange(100))
y1=[i+(43.17*np.random.random()) for i in x]
y2=[(57.39*np.random.random())-i for i in x]
plt.subplots(figsize=(15,5))
ax1 = plt.subplot(1,2,1)
plt.xlabel('Positively Correlated Numerical Variables')
sns.regplot(x=x,y=y1, color='green')
ax2 = plt.subplot(1,2,2)
sns.regplot(x=x,y=y2, color='tomato')
plt.xlabel('Negatively Correlated Numerical Variables')
plt.show()

sns.pairplot(df[['age','sibsp','parch','fare']])
plt.show()

correlation_matrix = df[['age','sibsp','parch','fare']].corr()
correlation_matrix

sns.heatmap(correlation_matrix, annot=True)
plt.show()

sns.scatterplot(x=df['sibsp'], y=df['parch'])
plt.show()

df['embark_town'].value_counts()

sns.barplot(x=df['embark_town'].value_counts().index,
            y=df['embark_town'].value_counts().values)
plt.show()

sns.countplot(data=df, x='embark_town')
plt.show()

plt.figure(figsize=(10,7))
plt.pie(x=df['embark_town'].value_counts().values,
        labels=df['embark_town'].value_counts().index,
        autopct='%2.2f%%')
plt.show()

pd.crosstab(index=df['survived'], columns=df['embark_town'])

# creating a facet grid with columns as survived=0 and survived=1
grid = sns.FacetGrid(data=df, col='survived', height=4, aspect=1, sharey=False)
# mapping bar plot and the data on to the grid
grid.map(sns.countplot, 'embark_town', palette=['black', 'brown', 'orange'])
plt.show()

# visualizing a strip plot
plt.figure(figsize=(7,5))
sns.stripplot(data=df, x='survived', y='age')
plt.show()

plt.figure(figsize=(7,5))
sns.stripplot(data=df, x='survived', y='age', hue='sex')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='age', y='fare')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='age', y='fare', hue='sex', size='pclass')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='age', y='fare', hue='sex', size='pclass', style='alone')
plt.show()

grid = sns.FacetGrid(data=df, row='sex', col='embark_town', height=5, aspect=1, hue='pclass')
grid.map(sns.scatterplot, 'age', 'fare').add_legend()
plt.show()